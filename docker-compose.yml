version: "3"

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

services:

  nginx:
    container_name: dev-nginx
    build:
      context: ./nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ${PWD}/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${PWD}/nginx/conf.d:/etc/nginx/conf.d
      - ${PWD}/nginx/ssl:/etc/nginx/ssl
      - ${WEB_ROOT_PATH}:/var/www/site
    depends_on:
      - php-fpm
      - mysql

  php-fpm:
    container_name: dev-php-pfm
    build:
      context: ./php-fpm
      args:
        - PHP_VERSION=${PHP_VERSION}
        - INSTALL_PCNTL=${PHP_INSTALL_PCNTL}
        - INSTALL_OPCACHE=${PHP_INSTALL_OPCACHE}
        - INSTALL_ZIP=${PHP_INSTALL_ZIP}
        - INSTALL_REDIS=${PHP_INSTALL_REDIS}
        - INSTALL_REDIS_VERSION=${PHP_INSTALL_REDIS_VERSION}
        - INSTALL_MONGODB=${PHP_INSTALL_MONGODB}
        - INSTALL_MONGODB_VERSION=${PHP_INSTALL_MONGODB_VERSION}
        - INSTALL_MEMCACHED=${PHP_INSTALL_MEMCACHED}
        - INSTALL_MEMCACHED_VERSION=${PHP_INSTALL_MEMCACHED_VERSION}
        - INSTALL_SWOOLE=${PHP_INSTALL_SWOOLE}
        - INSTALL_SWOOLE_VERSION=${PHP_INSTALL_SWOOLE_VERSION}
        - INSTALL_XUNSEARCH=${PHP_INSTALL_XUNSEARCH}
        - INSTALL_COMPOSER=${PHP_INSTALL_COMPOSER}
    ports:
      - 9000:9000
    volumes:
      - ${PWD}/php-fpm/conf-${PHP_VERSION}/php.ini:/usr/local/etc/php/php.ini
      - ${PWD}/php-fpm/conf-${PHP_VERSION}/php-fpm.conf:/usr/local/etc/php-fpm.conf
      - ${PWD}/php-fpm/conf-${PHP_VERSION}/php-fpm.d:/usr/local/etc/php-fpm.d
      - ${WEB_ROOT_PATH}:/var/www/site

  mysql:
    container_name: dev-mysql
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    ports:
      - ${MYSQL_PORT}:3306
    volumes:
      - ${PWD}/mysql/conf:/etc/mysql/conf.d 
      - ${PWD}/mysql/logs:/logs
      - ${PWD}/mysql/data:/var/lib/mysql
    # command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}

  mongo:
    container_name: dev-mongo
    build:
      context: ./mongo
      args:
        - MONGO_VERSION=${MONGO_VERSION}
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - ${PWD}/mongo/mongo-conf:/docker-entrypoint-initdb.d
      - ${PWD}/mongo/etc:/etc/mongo
      - ${PWD}/mongo/data/db:/data/db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    healthcheck:
      test: ["CMD", "netstat -anp | grep 27017"]
      interval: 2m
      timeout: 10s
      retries: 3

  yapi:
    container_name: dev-yapi
    build:
      context: ./yapi
      dockerfile: Dockerfile
    image: yapi
    # 第一次启动使用
    # command: "yapi server"
    # 之后使用下面的命令
    command: "node /my-yapi/vendors/server/app.js"
    volumes: 
      - ${PWD}/yapi/my-yapi:/my-yapi
    ports: 
      - 9090:9090
      - 3000:3000
    depends_on: 
      - mongo

  notes-api:
    build:
      context: ./notes-api-gin
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    networks:
      - my-bridge